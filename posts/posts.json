[
  {
    "path": "posts/welcome/",
    "title": "Modelos de Ocupación Norte de Santander",
    "description": "In this post we present a classic occupancy workflow using Unmarked and camera trap data.",
    "author": [
      {
        "name": "Diego J. Lizcano",
        "url": "http://dlizcano.github.io/"
      },
      {
        "name": "Lina Galvis",
        "url": {}
      },
      {
        "name": "Carlos Caceres",
        "url": {}
      }
    ],
    "date": "2022-11-04",
    "categories": [],
    "contents": "\r\nAntes de comenzar debemos instalar y cargar los paquetes: terra, mapview, sf, unmarked, tidyverse, geodata, readxl\r\n\r\n\r\nlibrary(terra)\r\n\r\nlibrary(raster)\r\nlibrary(rasterVis)\r\nlibrary(mapview)\r\nlibrary(sf)\r\nlibrary(unmarked)\r\nlibrary(tidyverse)\r\nlibrary(geodata)\r\nlibrary(readxl)\r\n\r\n\r\nPartiendo de la tabla de excel con la estructura:\r\n\r\nTomaremos la primera pestaña: Ardilla para el ejemplo.\r\nPrimero hay que cargar el archivo de excel desde la carpeta data, luego eliminar las camaras que no funcionaron y, luego calcular el centroide\r\n\r\n\r\n# modificar el nombre de la especie aca.\r\ntabla <- read_excel(\"D:/BoxFiles/Box Sync/CodigoR/Tesistas/LinaGalvis/data/tabla.xlsx\", \r\n    sheet = \"Ardilla\", skip = 2, na = \"X\")\r\n\r\n\r\n# elliminar filas 12, 13, 14\r\ntabla <- tabla[c(-14,-13,-12),]\r\n# View(tabla)\r\n# convierte a terra\r\npuntos <- vect(tabla, geom=c(\"long\", \"lat\"), crs=\"EPSG:4326\")\r\n# convierte a sf\r\npuntos_sf <- sf::st_as_sf(puntos)\r\n\r\n\r\nImportar datos geograficos con el centroide de la coordenada\r\n\r\n\r\n# centroide for terra\r\n# centoide <- centroids(puntos, TRUE)\r\ncentroide <- c(mean(tabla$long), mean(tabla$lat))\r\nclip_window <- extent(-72.92554, -72.87, 7.63, 7.68)\r\nbb <- c(-72.92554, -72.87, 7.63, 7.68)\r\n\r\n#srtm <- raster::getData('SRTM', lon=centroide[1], lat=centroide[2])\r\n\r\n#altitud <- elevation_3s(-72.893262, 7.664081007, path=\"data\")\r\n\r\naltitud <- rast(\"D:/BoxFiles/Box Sync/CodigoR/Tesistas/srtm_22_11.tif\")\r\n\r\n# crop the  raster using the vector extent\r\nsrtm_crop <- crop(altitud, clip_window)\r\n\r\n# elevation.crop and terrain covs\r\nelevation <- raster(srtm_crop)\r\nslope<-raster(terrain(srtm_crop, v=\"slope\"))\r\naspect <- raster(terrain(srtm_crop, v=\"aspect\"))\r\nroughness <- raster(terrain(srtm_crop, v=\"roughness\") )\r\n\r\ncov.stack<-raster::stack(elevation, slope, aspect, roughness)\r\nnames(cov.stack) <- c(\"elevation\", \"slope\", \"aspect\", \"roughness\" )\r\n# cosv.ras <- raster(rast(cov.stack))\r\n# plot(cov.stack)\r\n\r\ncam_covs <- raster::extract(cov.stack, puntos_sf)\r\n\r\nfull_covs <- as.data.frame(cam_covs) # convert to Data frame\r\nfull_covs_1 <- scale(full_covs)\r\nfull_covs_s <- as.data.frame(full_covs_1)\r\n# full_covs_s$camara <- cams_loc_QR # add camera name\r\n\r\n# library(leaflet)\r\n# leaflet(sf::st_as_sf(puntos)) %>%\r\n#    addTiles() %>%\r\n#   addCircleMarkers()\r\nmapview(puntos_sf, map.types = c(\"Esri.WorldImagery\", \"OpenTopoMap\"), color = \"grey40\")\r\n\r\n\r\n\r\nAnalisis de ocupacíon\r\n\r\n\r\n# Make unmarked frame\r\numf_y_full<- unmarkedFrameOccu(y= tabla[,7:281])\r\nsiteCovs(umf_y_full) <- full_covs_s # data.frame(Elev=full_covs$Elev) # Full\r\n#######Graficar umf\r\nplot(umf_y_full)\r\n\r\n\r\n# build  models\r\nmf0<-occu(~1 ~ 1, umf_y_full)\r\nmf1<-occu(~1 ~ elevation, umf_y_full)\r\nmf2<-occu(~1 ~ elevation +I(elevation^2), umf_y_full)\r\nmf3<-occu(~1 ~ slope, umf_y_full)\r\nmf4<-occu(~1 ~ aspect, umf_y_full)\r\nmf5<-occu(~1 ~ roughness, umf_y_full, starts = c(0.6, -3, 0))\r\nmf6<-occu(~elevation +I(elevation^2) ~ elevation +I(elevation^2), umf_y_full)\r\nmf7<-occu(~roughness ~ elevation +I(elevation^2), umf_y_full)\r\nmf8<-occu(~slope ~ elevation +I(elevation^2), umf_y_full)\r\n\r\n\r\n# fit list\r\nfms1<-fitList(\"p(.) Ocu(.)\"=mf0,\r\n              \"p(.) Ocu(elev)\"=mf1,\r\n              \"p(.) Ocu(elev^2)\"=mf2,\r\n              \"p(.) Ocu(slope)\"=mf3,\r\n              \"p(.) Ocu(aspect)\"=mf4,\r\n              \"p(.) Ocu(roughness)\"=mf5,\r\n              \"p(elev^2) Ocu(elev^2)\"=mf6,\r\n              \"p(roughness) Ocu(elev^2)\"=mf7,\r\n              \"p(slope) Ocu(elev^2)\"=mf8\r\n)\r\n\r\nmodSel(fms1)\r\n\r\n                         nPars    AIC delta   AICwt cumltvWt\r\np(elev^2) Ocu(elev^2)        6 845.32  0.00 1.0e+00     1.00\r\np(roughness) Ocu(elev^2)     5 893.77 48.45 3.0e-11     1.00\r\np(slope) Ocu(elev^2)         5 894.28 48.96 2.3e-11     1.00\r\np(.) Ocu(elev^2)             4 894.51 49.19 2.1e-11     1.00\r\np(.) Ocu(elev)               3 900.42 55.09 1.1e-12     1.00\r\np(.) Ocu(.)                  2 904.07 58.75 1.7e-13     1.00\r\np(.) Ocu(roughness)          3 905.93 60.61 6.9e-14     1.00\r\np(.) Ocu(slope)              3 906.07 60.75 6.4e-14     1.00\r\np(.) Ocu(aspect)             3 906.07 60.75 6.4e-14     1.00\r\n\r\n# el mejor modelo es el mf6\r\n\r\n\r\nAjuste del modelo\r\n\r\n\r\npb_f <- parboot(mf6, nsim=500, report=10) \r\n\r\nt0 = 105.7415 \r\n\r\n## t0 = 36.31634\r\nplot (pb_f)\r\n\r\n\r\n\r\nPrediccón\r\n\r\n\r\nnewdat_range<-data.frame(elevation=seq(min(full_covs_s$elevation),\r\n                                       max(full_covs_s$elevation),length=100), \r\n                         roughness=seq(min(full_covs_s$roughness),\r\n                                       max(full_covs_s$roughness), length=100))\r\n\r\n\r\n## plot Detection en escala original\r\npred_det <-predict(mf6, type=\"det\", newdata=newdat_range, appendData=TRUE)\r\nplot(Predicted~elevation, pred_det,type=\"l\",col=\"blue\", \r\n     xlab=\"Elevation\",\r\n     ylab=\"Detection Probability\",\r\n     xaxt=\"n\")\r\nxticks <- c(-1, -0.5, 0, 0.5, 1, 1.5, 2, 2.5, 3) # -1:2\r\nxlabs <- xticks*sd(full_covs$roughness) + mean(full_covs$roughness) #Use the mean and sd of original value to change label name\r\naxis(1, at=xticks, labels=round(xlabs, 1))\r\nlines(lower~elevation, pred_det,type=\"l\",col=gray(0.5))\r\nlines(upper~elevation, pred_det,type=\"l\",col=gray(0.5))\r\n\r\n\r\n###  Plot occupancy en escala original\r\npred_psi <-predict(mf6, type=\"state\", newdata=newdat_range, appendData=TRUE) \r\nplot(Predicted ~ elevation, pred_psi, type=\"l\", ylim=c(0,1), col=\"blue\",\r\n     xlab=\"Elevation\",\r\n     ylab=\"Occupancy Probability\",\r\n     xaxt=\"n\")\r\nxticks <- c(-1, -0.5, 0, 0.5, 1, 1.5, 2)  # -1:2\r\nxlabs <- xticks*sd(full_covs$elevation) + mean(full_covs$elevation) #Use the mean and sd of original value to change label name\r\naxis(1, at=xticks, labels=round(xlabs, 1))\r\nlines(lower ~ elevation, pred_psi, type=\"l\", col=gray(0.5))\r\nlines(upper ~ elevation, pred_psi, type=\"l\", col=gray(0.5))\r\n\r\n\r\n\r\nSpatially Explicit Occupancy Model\r\n\r\n\r\nlibrary(RColorBrewer)\r\n\r\n srtm_crop_s <- stack(scale(elevation), \r\n                      scale(roughness)) # scale altitud\r\n names(srtm_crop_s) <- c(\"elevation\", \"roughness\")\r\n crs(srtm_crop_s) <- \"+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0\"\r\n\r\npred_psi_s <-predict(mf6, type=\"state\", newdata=srtm_crop_s) \r\n\r\npred_psi_r <- pred_psi_s # * sd(full_covs$elevation) + mean(full_covs$elevation)\r\ncrs(pred_psi_r) <- \"+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0\"\r\nclr <- colorRampPalette(brewer.pal(9, \"YlGn\"))\r\n\r\n# mapview (pred_psi_r[[1]], col.regions = clr,  legend = TRUE, alpha=0.7)\r\n\r\n# plot(pred_psi_s[[1]], main=\"Occupancy\")\r\n\r\nlevelplot(pred_psi_r[[1]], par.settings = YlOrRdTheme(), margin=FALSE, main=\"Ocupancy\")\r\n\r\n\r\nmapview(pred_psi_r[[1]], map.types = c(\"Esri.WorldImagery\")) + mapview(puntos_sf)\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "https://dlizcano.github.io/occu_ndesantander/",
    "last_modified": "2022-11-04T09:35:08-05:00",
    "input_file": "welcome.knit.md"
  }
]
